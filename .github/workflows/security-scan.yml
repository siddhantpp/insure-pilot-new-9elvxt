name: Security Scan

on:
  push:
    branches: 
      - main
      - develop
    paths:
      - src/**
      - infrastructure/docker/**
      - .github/workflows/security-scan.yml
  pull_request:
    branches:
      - main
      - develop
    paths:
      - src/**
      - infrastructure/docker/**
      - .github/workflows/security-scan.yml
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sunday at midnight
  workflow_dispatch:  # Allow manual triggers

jobs:
  dependency-scanning:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Scan frontend dependencies
        run: cd src/web && npm audit --json > npm-audit.json || true

      - name: Check for high severity frontend vulnerabilities
        run: |
          cd src/web && cat npm-audit.json | jq -e '.vulnerabilities | select(.high > 0 or .critical > 0)' && \
          echo 'High or critical vulnerabilities found' && exit 1 || \
          echo 'No high or critical vulnerabilities found'

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer:v2

      - name: Scan backend dependencies
        run: cd src/backend && composer audit --format=json > composer-audit.json || true

      - name: Check for high severity backend vulnerabilities
        run: |
          cd src/backend && cat composer-audit.json | jq -e '.vulnerabilities | select(.high > 0 or .critical > 0)' && \
          echo 'High or critical vulnerabilities found' && exit 1 || \
          echo 'No high or critical vulnerabilities found'

  code-scanning:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, typescript, php

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  container-scanning:
    runs-on: ubuntu-latest
    needs: [dependency-scanning]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build backend image for scanning
        run: docker build -t insurepilot/documents-view/backend:scan -f infrastructure/docker/backend.Dockerfile .

      - name: Scan backend image
        uses: aquasecurity/trivy-action@0.10.0
        with:
          image-ref: 'insurepilot/documents-view/backend:scan'
          format: 'sarif'
          output: 'trivy-backend-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
          ignore-unfixed: 'true'

      - name: Build frontend image for scanning
        run: docker build -t insurepilot/documents-view/frontend:scan -f infrastructure/docker/frontend.Dockerfile .

      - name: Scan frontend image
        uses: aquasecurity/trivy-action@0.10.0
        with:
          image-ref: 'insurepilot/documents-view/frontend:scan'
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
          ignore-unfixed: 'true'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-backend-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-frontend-results.sarif'

  secret-detection:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: '0'

      - name: Detect secrets
        uses: gitleaks/gitleaks-action@v2
        with:
          config-path: '.github/gitleaks.toml'

  filesystem-scanning:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Scan filesystem
        uses: aquasecurity/trivy-action@0.10.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
          ignore-unfixed: 'true'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-fs-results.sarif'

  notify-results:
    runs-on: ubuntu-latest
    needs: [dependency-scanning, code-scanning, container-scanning, secret-detection, filesystem-scanning]
    if: always()
    steps:
      - name: Set notification message for success
        if: >
          needs.dependency-scanning.result == 'success' && 
          needs.code-scanning.result == 'success' && 
          needs.container-scanning.result == 'success' && 
          needs.secret-detection.result == 'success' && 
          needs.filesystem-scanning.result == 'success'
        run: |
          echo "MESSAGE=✅ Security scan for Documents View passed.\nAll security checks completed successfully." >> $GITHUB_ENV

      - name: Set notification message for failure
        if: >
          needs.dependency-scanning.result == 'failure' || 
          needs.code-scanning.result == 'failure' || 
          needs.container-scanning.result == 'failure' || 
          needs.secret-detection.result == 'failure' || 
          needs.filesystem-scanning.result == 'failure'
        run: |
          echo "MESSAGE=❌ Security scan for Documents View failed.\nSee details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_ENV

      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ secrets.SECURITY_SLACK_CHANNEL_ID }}
          payload: '{"text":"${{ env.MESSAGE }}"}'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}